generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  osu_id       String
  osu_username String

  discord_id       String?
  discord_username String?

  // Creator relations
  created_tournaments Tournament[]
  created_tryouts     Tryout[]
  created_teams       Team[]

  // Player relations
  tryouts        PlayersOnTryouts[]
  tryout_lobbies PlayersOnTryoutLobbies[]
  teams          PlayersOnTeams[]
  team_invites   TeamInvite[]

  // Referee relations
  claimed_matches           Match[]
  claimed_tryout_lobbies    TryoutLobby[]
  claimed_qualifier_lobbies TournamentQualifierLobby[]

  sessions Session[]
  keys     Key[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@index([osu_username])
  @@index([osu_id])
  @@index([discord_username])
  @@index([discord_id])
  @@map("users")
}

model Session {
  id String @id

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  active_expires BigInt
  idle_expires   BigInt

  @@index([user_id])
  @@map("sessions")
}

model Key {
  id String @id

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  hashed_password String?

  oauth_credentials OAuthCredentials?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@index([user_id])
  @@map("keys")
}

model OAuthCredentials {
  access_token            String  @db.VarChar(1024)
  refresh_token           String? @db.VarChar(1024)
  access_token_expires_in Int

  key    Key    @relation(fields: [key_id], references: [id], onDelete: Cascade)
  key_id String

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@id([key_id])
  @@map("oauth_credentials")
}

model Tournament {
  id        String @id @db.VarChar(24)
  name      String @db.VarChar(255)
  acronym   String @db.VarChar(64)
  server_id String

  start_date            DateTime  @db.Timestamp(6)
  end_date              DateTime? @db.Timestamp(6)
  registration_end_date DateTime  @db.Timestamp(6)

  staff_channel_id     String
  mappooler_channel_id String
  referee_channel_id   String
  player_channel_id    String

  embed_channel_id String?
  embed_message_id String?

  organizer_role_id String
  mappooler_role_id String
  referee_role_id   String
  player_role_id    String

  min_team_size   Int
  max_team_size   Int
  lobby_team_size Int
  // maybe add an isJoinable field?
  // TODO: Add restrictions. (e.g. rank, country, etc.)

  win_condition WinCondition
  scoring       ScoringType
  type          TournamentType

  qualifier TournamentQualifier?
  stages    TournamentStage[]
  teams     Team[]

  creator    User   @relation(fields: [creator_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  creator_id String

  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @updatedAt @db.Timestamp(6)

  @@map("tournaments")
}

model TournamentStage {
  id        String @id @db.VarChar(24)
  name      String @db.VarChar(255)
  custom_id String @db.VarChar(16)

  tournament    Tournament @relation(fields: [tournament_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tournament_id String     @db.VarChar(24)

  mappool       TournamentMapPick[]
  mappool_order String              @default("")
  is_published  Boolean             @default(false)

  matches Match[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("tournament_stages")
}

model TournamentQualifier {
  id String @id @db.VarChar(24)

  mappool       QualifierMapPick[]
  mappool_order String             @default("")
  is_published  Boolean            @default(false)

  lobbies TournamentQualifierLobby[]

  deadline DateTime @db.Timestamp(6)

  tournament    Tournament @relation(fields: [tournament_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tournament_id String     @unique @db.VarChar(24)

  @@map("tournament_qualifiers")
}

model TournamentQualifierLobby {
  id       String   @id @db.VarChar(24)
  schedule DateTime @db.Timestamp(6)

  tournament_qualifier    TournamentQualifier @relation(fields: [tournament_qualifier_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tournament_qualifier_id String              @db.VarChar(24)

  status TryoutLobbyStatus @default(Pending)

  referee    User?   @relation(fields: [referee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  referee_id String?

  staff_embed_message_id    String? //? Used for the interactive embed.
  player_embed_message_id   String? //? Used for the interactive embed.
  schedule_embed_message_id String? //? Used for the interactive embed.

  team    Team   @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team_id String @unique @db.VarChar(24)

  bancho_id String?
  auto_ref  Boolean @default(false)

  reminder_status ReminderStatus @default(Pending)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("tournament_qualifier_lobbies")
}

model QualifierMapPick {
  beatmap    Beatmap? @relation(fields: [beatmap_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  beatmap_id Int?

  pick_id      String              @db.VarChar(16)
  qualifier    TournamentQualifier @relation(fields: [qualifier_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  qualifier_id String              @db.VarChar(24)

  mods String @default("NM")

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@id([pick_id, qualifier_id])
  @@map("tournament_qualifier_map_picks")
}

model TournamentMapPick {
  beatmap    Beatmap? @relation(fields: [beatmap_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  beatmap_id Int?

  pick_id  String          @db.VarChar(16)
  stage    TournamentStage @relation(fields: [stage_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stage_id String

  mods String @default("NM")

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@id([pick_id, stage_id])
  @@map("tournament_map_picks")
}

model Match {
  id        String      @id @db.VarChar(24)
  custom_id String      @db.VarChar(16)
  schedule  DateTime    @db.Timestamp(6)
  mp_link   String?     @db.VarChar(255)
  status    MatchStatus @default(Pending)

  stage    TournamentStage @relation(fields: [stage_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stage_id String          @db.VarChar(24)

  referee    User?   @relation(fields: [referee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  referee_id String?

  redTeam     Team?   @relation("red_team", fields: [red_team_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  red_team_id String? @db.VarChar(24)

  blueTeam     Team?   @relation("blue_team", fields: [blue_team_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  blue_team_id String? @db.VarChar(24)

  winner    Team?   @relation(fields: [winner_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  winner_id String? @db.VarChar(24)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("tournament_matches")
}

model Team {
  id       String  @id @db.VarChar(24)
  name     String  @db.VarChar(127)
  icon_url String? @db.VarChar(255)
  timezone String  @db.VarChar(16)

  creator    User   @relation(fields: [creator_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  creator_id String

  players PlayersOnTeams[]

  tournament    Tournament @relation(fields: [tournament_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tournament_id String     @db.VarChar(24)

  invitations TeamInvite[]

  matches_as_red_team  Match[] @relation("red_team")
  matches_as_blue_team Match[] @relation("blue_team")

  matches_won Match[]

  one_player_team Boolean @default(false)

  qualifier_lobby  TournamentQualifierLobby?
  qualifier_played Boolean                   @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("tournament_teams")
}

model TeamInvite {
  id BigInt @id @default(autoincrement())

  status TeamInviteStatus @default(Pending)

  embed_message_id String?

  team    Team   @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team_id String @db.VarChar(24)

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @db.VarChar(24)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("tournament_team_invites")
}

enum TeamInviteStatus {
  Pending
  Accepted
  Rejected

  @@map("team_invite_status")
}

model Tryout {
  id                String   @id @db.VarChar(24)
  name              String   @db.VarChar(255)
  acronym           String   @db.VarChar(64)
  staff_channel_id  String
  player_channel_id String
  embed_channel_id  String?
  embed_message_id  String?
  admin_role_id     String
  referee_role_id   String
  player_role_id    String
  server_id         String
  allow_staff       Boolean  @default(false)
  start_date        DateTime @db.Timestamp(6)
  end_date          DateTime @db.Timestamp(6)

  stages     TryoutStage[]
  creator    User          @relation(fields: [creator_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  creator_id String

  players PlayersOnTryouts[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@index([staff_channel_id])
  @@index([player_channel_id])
  @@map("tryouts")
}

model TryoutStage {
  id        String @id @db.VarChar(24)
  name      String @db.VarChar(255)
  custom_id String @db.VarChar(16)

  tryout    Tryout @relation(fields: [tryout_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tryout_id String @db.VarChar(24)

  lobbies TryoutLobby[]

  mappool       TryoutMapPick[]
  mappool_order String          @default("")
  is_published  Boolean         @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("tryout_stages")
}

model TryoutLobby {
  id           String   @id @db.VarChar(24)
  custom_id    String   @db.VarChar(16)
  player_limit Int
  schedule     DateTime @db.Timestamp(6)

  stage   TryoutStage @relation(fields: [stageId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stageId String      @db.VarChar(24)

  status TryoutLobbyStatus @default(Pending)

  referee    User?   @relation(fields: [referee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  referee_id String?

  staff_embed_message_id  String? //? Used for the interactive embed.
  player_embed_message_id String? //? Used for the interactive embed.

  players PlayersOnTryoutLobbies[]

  bancho_id String?
  auto_ref  Boolean @default(false)

  reminder_status ReminderStatus @default(Pending)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("tryout_lobbies")
}

// TODO: Instead of linking directly to the user, link to the PlayersOnTryout model.
// ? This way we can drop records in case the the PlayersOnTryout record is deleted.
model PlayersOnTryoutLobbies {
  tryout_lobby_id String @db.VarChar(24)
  user_id         String

  tryoutLobby TryoutLobby @relation(fields: [tryout_lobby_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  player      User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  played Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@id([tryout_lobby_id, user_id])
  @@map("players_to_tryout_lobbies")
}

model PlayersOnTryouts {
  tryout_id String @db.VarChar(24)
  user_id   String

  tryout Tryout @relation(fields: [tryout_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  player User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@id([tryout_id, user_id])
  @@map("players_to_tryouts")
}

model PlayersOnTeams {
  team_id String @db.VarChar(24)
  user_id String

  team   Team @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  player User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@id([team_id, user_id])
  @@map("players_to_teams")
}

model TryoutMapPick {
  beatmap    Beatmap? @relation(fields: [beatmap_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  beatmap_id Int?

  pick_id  String      @db.VarChar(16)
  stage    TryoutStage @relation(fields: [stage_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stage_id String

  mods String @default("NM")

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@id([pick_id, stage_id])
  @@map("tryout_map_picks")
}

model Beatmap {
  id Int @id

  beatmapset_id     Int
  artist            String @db.VarChar(255)
  title             String @db.VarChar(255)
  difficulty_rating Float
  circle_size       Float
  hp_drain          Float
  accuracy          Float
  approach_rate     Float
  mode              String
  status            String
  total_length      Int
  creator           String
  version           String
  cover_url         String

  tryout_map_picks     TryoutMapPick[]
  qualifier_map_picks  QualifierMapPick[]
  tournament_map_picks TournamentMapPick[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt

  @@map("beatmaps")
}

enum MatchStatus {
  Pending
  Ongoing
  Completed

  @@map("match_status")
}

enum WinCondition {
  Accuracy
  MissCount
  Score

  @@map("win_condition")
}

enum ScoringType {
  ScoreV1
  ScoreV2

  @@map("scoring_type")
}

enum TournamentType {
  TeamVsTeam
  OneVsOne

  @@map("tournament_type")
}

enum TryoutLobbyStatus {
  Pending
  Ongoing
  Override
  Failed
  Skipped
  Completed

  @@map("tryout_lobby_status")
}

enum ReminderStatus {
  Pending
  Error
  Scheduled
  Skipped
  Sent

  @@map("reminder_status")
}
